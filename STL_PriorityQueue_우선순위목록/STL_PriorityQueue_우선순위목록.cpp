// STL_PriorityQueue_우선순위목록.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//

#include <iostream>
#include <queue> // std::priority_queue 포함
#include <tuple>
#include <string>

int main()
{
    /*
    단순히 요소를 추가해서 이에 해당하는 우선 순위를 첨부할 수는 없다.
    우선순위 큐는 요소들이 큐 안에 놓여있는 기본 순서 그대로를 이용하려 할 것.
    자신만으 ㅣ구조체를 구현해 여기에 우선순위 번호와 할 일의 설명을 부여한 후
    비교 연산자인 <를 구현해 원하는 순서로 정렬할 수 있게 한다.
    혹은 std::pair를 이용하여 하나의 타입에 두 가지를 합쳐 자동으로 비교하게 구현할 수도 있다.
    */
    using item_type = std::pair<int, std::string>; // 우선순위 정수와 설명 문자열
    std::priority_queue<item_type> q; //우선순위 큐 인스턴스

    /*
    std::priority_queue는 초기화 목록을 받는 생성자가 없어 큐의 처음부터 채워 넣을 때 이를 사용할 수 없다.
    벡터나 일반적인 리스트에서는 초기화 목록을 사용할 수 있다.
    그러므로 먼저 사용자 목록을 정의한 후 그 다음 단계에서 이를 삽입한다.
    */
    std::initializer_list<item_type> il{
        {1, "dishes"},
        {0, "watch tv"},
        {2, "do homework"},
        {0, "read comics"}
    };

    for (const auto& p : il) {
        q.push(p);
    }

    while (!q.empty())
    {
        std::cout << q.top().first << ": " << q.top().second << '\n';
        q.pop();
        std::cout << '\n';
    }

}

// 프로그램 실행: <Ctrl+F5> 또는 [디버그] > [디버깅하지 않고 시작] 메뉴
// 프로그램 디버그: <F5> 키 또는 [디버그] > [디버깅 시작] 메뉴

// 시작을 위한 팁: 
//   1. [솔루션 탐색기] 창을 사용하여 파일을 추가/관리합니다.
//   2. [팀 탐색기] 창을 사용하여 소스 제어에 연결합니다.
//   3. [출력] 창을 사용하여 빌드 출력 및 기타 메시지를 확인합니다.
//   4. [오류 목록] 창을 사용하여 오류를 봅니다.
//   5. [프로젝트] > [새 항목 추가]로 이동하여 새 코드 파일을 만들거나, [프로젝트] > [기존 항목 추가]로 이동하여 기존 코드 파일을 프로젝트에 추가합니다.
//   6. 나중에 이 프로젝트를 다시 열려면 [파일] > [열기] > [프로젝트]로 이동하고 .sln 파일을 선택합니다.
